### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Collection {
  date: String
  detail: String
  id: ID!
  items(after: ID, before: ID, first: Int, last: Int, skip: Int): [Item!]!
  name: String!
  owner: User!
  section: Section!
}

input CollectionCreateInput {
  createdAt: DateTime
  date: String
  detail: String
  id: ID
  items: ItemCreateManyWithoutItemsInput
  name: String!
  owner: UserCreateOneWithoutOwnerInput!
  section: SectionCreateOneWithoutSectionInput!
}

input CollectionCreateManyWithoutCollectionsInput {
  connect: [CollectionWhereUniqueInput!]
  create: [CollectionCreateWithoutSectionInput!]
}

input CollectionCreateWithoutSectionInput {
  createdAt: DateTime
  date: String
  detail: String
  id: ID
  items: ItemCreateManyWithoutItemsInput
  name: String!
  owner: UserCreateOneWithoutOwnerInput!
}

input CollectionFilter {
  every: CollectionWhereInput
  none: CollectionWhereInput
  some: CollectionWhereInput
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  createdAt: DateTimeFilter
  date: NullableStringFilter
  detail: NullableStringFilter
  id: StringFilter
  items: ItemFilter
  name: StringFilter
  NOT: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  owner: UserWhereInput
  section: SectionWhereInput
}

input CollectionWhereUniqueInput {
  id: ID
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Item {
  author: String!
  comment: String
  description: String
  id: ID!
  imageUrl: String
  meta: String!
  productUrl: String!
  title: String!
  type: ItemType!
}

input ItemCreateManyWithoutItemsInput {
  connect: [ItemWhereUniqueInput!]
  create: [ItemCreateWithoutCollectionInput!]
}

input ItemCreateWithoutCollectionInput {
  author: String!
  comment: String
  createdAt: DateTime
  description: String
  id: ID
  imageUrl: String
  meta: String!
  productUrl: String!
  title: String!
  type: ItemType!
  updatedAt: DateTime
}

input ItemFilter {
  every: ItemWhereInput
  none: ItemWhereInput
  some: ItemWhereInput
}

enum ItemType {
  album
  article
  book
  movie
  people
  podcast
  repository
  video
  website
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  author: StringFilter
  collection: CollectionWhereInput
  comment: NullableStringFilter
  createdAt: DateTimeFilter
  description: NullableStringFilter
  id: StringFilter
  imageUrl: NullableStringFilter
  meta: StringFilter
  NOT: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  productUrl: StringFilter
  title: StringFilter
  type: ItemType
  updatedAt: DateTimeFilter
}

input ItemWhereUniqueInput {
  id: ID
}

type Mutation {
  createItem(collectionId: String!, overridedTitle: String, url: String!): Item!
  createOneCollection(data: CollectionCreateInput!): Collection!
  createOneSection(data: SectionCreateInput!): Section!
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Profile {
  linkedin: String
  mail: String
  website: String
  youtube: String
}

input ProfileCreateOneWithoutProfileInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUsersInput
}

input ProfileCreateWithoutUsersInput {
  github: String
  id: ID
  linkedin: String
  mail: String
  website: String
  youtube: String
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  github: NullableStringFilter
  id: StringFilter
  linkedin: NullableStringFilter
  mail: NullableStringFilter
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  users: UserFilter
  website: NullableStringFilter
  youtube: NullableStringFilter
}

input ProfileWhereUniqueInput {
  id: ID
}

type Query {
  collection(where: CollectionWhereUniqueInput!): Collection
  collections(after: ID, before: ID, first: Int, last: Int, orderBy: QueryCollectionsOrderByInput, skip: Int, where: QueryCollectionsWhereInput): [Collection!]!
  section(where: SectionWhereUniqueInput!): Section
  sections(after: ID, before: ID, first: Int, last: Int, skip: Int, where: QuerySectionsWhereInput): [Section!]!
  user(where: UserWhereUniqueInput!): User
}

input QueryCollectionsOrderByInput {
  date: OrderByArg
}

input QueryCollectionsWhereInput {
  owner: UserWhereInput
  section: SectionWhereInput
}

input QuerySectionsWhereInput {
  owner: UserWhereInput
}

type Section {
  collections(after: ID, before: ID, first: Int, last: Int, skip: Int): [Collection!]!
  id: ID!
  index: Int!
  name: String!
}

input SectionCreateInput {
  collections: CollectionCreateManyWithoutCollectionsInput
  createdAt: DateTime
  id: ID
  index: Int
  name: String!
  owner: UserCreateOneWithoutOwnerInput!
}

input SectionCreateManyWithoutSectionsInput {
  connect: [SectionWhereUniqueInput!]
  create: [SectionCreateWithoutOwnerInput!]
}

input SectionCreateOneWithoutSectionInput {
  connect: SectionWhereUniqueInput
  create: SectionCreateWithoutCollectionsInput
}

input SectionCreateWithoutCollectionsInput {
  createdAt: DateTime
  id: ID
  index: Int
  name: String!
  owner: UserCreateOneWithoutOwnerInput!
}

input SectionCreateWithoutOwnerInput {
  collections: CollectionCreateManyWithoutCollectionsInput
  createdAt: DateTime
  id: ID
  index: Int
  name: String!
}

input SectionFilter {
  every: SectionWhereInput
  none: SectionWhereInput
  some: SectionWhereInput
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  collections: CollectionFilter
  createdAt: DateTimeFilter
  id: StringFilter
  index: IntFilter
  name: StringFilter
  NOT: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  owner: UserWhereInput
}

input SectionWhereUniqueInput {
  id: ID
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  biography: String!
  firstname: String!
  id: ID!
  label: String
  pictureUrl: String!
  profile: Profile
  sections(after: ID, before: ID, first: Int, last: Int, skip: Int): [Section!]!
  slug: String!
}

input UserCreateOneWithoutOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCollectionsInput
}

input UserCreateWithoutCollectionsInput {
  biography: String!
  createdAt: DateTime
  firstname: String!
  id: ID
  label: String
  pictureUrl: String!
  profile: ProfileCreateOneWithoutProfileInput
  sections: SectionCreateManyWithoutSectionsInput
  slug: String!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  biography: StringFilter
  collections: CollectionFilter
  createdAt: DateTimeFilter
  firstname: StringFilter
  id: StringFilter
  label: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  pictureUrl: StringFilter
  profile: ProfileWhereInput
  sections: SectionFilter
  slug: StringFilter
}

input UserWhereUniqueInput {
  id: ID
  slug: String
}
